Homebrew: Your macOS Package Manager üç∫
#######################################

:date: 2025-8-23 23:53
:tags: brew, macOS
:category: misc
:slug: brew
:summary: A primer on the unnofficial macOS package manager
:lang: en

Welcome to the world of macOS! If you're coming from another operating
system or are new to the command line, you might be wondering how to
easily install and manage software. That's where Homebrew comes in!

What is Homebrew? ü§î
====================

Think of Homebrew as an app store for developers on macOS (and Linux).
It's a free and open-source package manager that simplifies the process
of installing, updating, and uninstalling software from the command
line. Instead of downloading .dmg files and dragging applications to
your "Applications" folder, Homebrew lets you do it with simple
commands.

Homebrew has two main parts:

- **Homebrew (Core):** For installing command-line tools and libraries
  (like python, git, or node).
- **Homebrew Cask:** An extension for installing graphical macOS
  applications (like Firefox, VLC, or Spotify).

The Problem Homebrew Solves ‚öôÔ∏è
==============================

macOS comes with a lot of built-in tools, but it doesn't include
everything a developer or power user might need. Traditionally,
installing additional software on macOS could involve:

- Searching for the correct download link.
- Navigating complex installation wizards.
- Manually managing dependencies (other software the application needs
  to run).
- Dealing with potential conflicts between different installations.

Homebrew streamlines this entire process, handling dependencies,
configurations, and installations in a consistent and efficient manner.
It saves you from the tedious "download a .dmg, open it, and drag the
app to the Applications folder" process.

Getting Homebrew Installed üõ†Ô∏è
=============================

Ready to get started? Here's how to install Homebrew:

- **Open Terminal:** You can find Terminal in ``/Applications/Utilities``
  or by searching for it using Spotlight (``Command + Space``).
- **Install Command Line Tools for Xcode** (if you haven't already):
  Sometimes, Homebrew requires these tools. Run the following command:

  .. code-block:: bash

     xcode-select --install

  If they are already installed, you'll get a message saying so.
  Otherwise, follow the prompts to install them.

- **Run the Homebrew Installation Script:** Copy and paste the following
  command into your Terminal and press Enter:

  .. code-block:: bash

     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  This command downloads and runs the official Homebrew installation
  script.

- **Follow the Prompts:** The script will explain what it will do and
  ask for your password (this is normal for installing software).
  Carefully read the prompts and press Enter to proceed.

- **Add Homebrew to Your PATH** (if the installer doesn't do it): After
  installation, the script might give you instructions to add Homebrew
  to your system's PATH. This allows you to run ``brew`` commands from any
  directory in Terminal. Typically, this involves running a command like:

  .. code-block:: console

     echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc

  (for Zsh, the default shell on newer macOS versions)

  or

  .. code-block:: console

     echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.bash_profile

  (for Bash)

  Then, run ``source ~/.zshrc`` or ``source ~/.bash_profile`` to apply the changes.

- **Verify the Installation:** To make sure Homebrew is installed
  correctly, run:

  .. code-block:: bash

     brew doctor

  This command checks for common problems and will give you advice on how
  to fix them if any are found. You should see a message saying "Your
  system is ready to brew."

Using Homebrew: Essential Commands ‚öôÔ∏è
=====================================

Now that you have Homebrew installed, let's look at some essential
commands. We'll use Firefox as our example, which is a "Cask" in
Homebrew's terminology.

Searching for Software üîç
-------------------------

To find a specific piece of software, use the ``search`` command followed by
the name (or keywords):

.. code-block:: bash

   brew search <software_name>

For example, to search for the Firefox browser, you would run:

.. code-block:: bash

   brew search firefox

Homebrew will display any formulas or casks that match your search terms.
You'll notice ``firefox`` has a ``--cask`` flag next to it, indicating it's a
graphical application.

Getting Information About Software ‚ÑπÔ∏è
-------------------------------------

Once you've found the software you're interested in, you can get more
information about it using the ``info`` command. For Casks, you'll need to
specify ``--cask``:

.. code-block:: bash

   brew info --cask <cask_name>

For example:

.. code-block:: bash

   brew info --cask firefox

This will show you details like the software's website, description, and
installation instructions.

Installing Software ‚¨áÔ∏è
----------------------

To install a graphical application, use the ``install`` command followed by
the ``--cask`` flag and the software name:

.. code-block:: bash

   brew install --cask <cask_name>

For example, to install Firefox:

.. code-block:: bash

   brew install --cask firefox

Homebrew will download the necessary files, install the application to
your ``/Applications`` folder, and even manage the dependencies.

Updating Homebrew Itself üîÑ
---------------------------

To get the latest version of Homebrew and its formula and cask
definitions, run:

.. code-block:: bash

   brew update

This command downloads the newest information from the Homebrew
repository.

Upgrading Your Software ‚¨ÜÔ∏è
--------------------------

Homebrew provides powerful commands to manage updates for your installed
software.

Checking for Outdated Software (With and Without --greedy) üëÄ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To see which of your installed Homebrew packages have newer versions
available, run:

.. code-block:: bash

   brew outdated

By default, this command will not show you updates for apps that have
their own built-in update mechanism (known as ``auto_updates``). This is
because Homebrew defers to the app's own updater to avoid conflicts. For
example, apps like Firefox and Google Chrome often handle their own
updates.

However, if you want Homebrew to list all available updates, including
those with ``auto_updates``, you can use the ``--greedy`` flag:

.. code-block:: bash

   brew outdated --greedy

This is useful if you prefer to manage all your updates through Homebrew
rather than through each app's individual updater.

Upgrading All Outdated Software (With and Without --greedy) ‚úÖ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To upgrade all the software installed via Homebrew to their latest
versions, use:

.. code-block:: bash

   brew upgrade

Just like with ``brew outdated``, this command will ignore any apps that have
their own ``auto_updates`` enabled.

To force Homebrew to upgrade all outdated software, including those with
``auto_updates`` enabled, use the ``--greedy`` flag:

.. code-block:: bash

   brew upgrade --greedy

You can also upgrade a specific piece of software, for example:

.. code-block:: bash

   brew upgrade --cask firefox

This command will override the ``auto_updates`` setting for that specific app
and perform the upgrade via Homebrew.

Conclusion üéâ
=============

Homebrew is a powerful tool that will significantly simplify how you
manage software on your macOS system. By mastering these basic commands,
including the flexible ``--greedy`` flag for Casks, you'll be well on
your way to a more efficient and enjoyable development or user
experience. Happy brewing! üç∫
