<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>porfirio's blog - postinstall</title><link href="https://porfiriopaiz.github.io/site/" rel="alternate"></link><link href="https://porfiriopaiz.github.io/site/feeds/postinstall.atom.xml" rel="self"></link><id>https://porfiriopaiz.github.io/site/</id><updated>2018-11-29T02:53:00-06:00</updated><entry><title>i3</title><link href="https://porfiriopaiz.github.io/site/posts/2018/11/29/i3.html" rel="alternate"></link><published>2018-11-29T02:53:00-06:00</published><updated>2018-11-29T02:53:00-06:00</updated><author><name>Porfirio PÃ¡iz</name></author><id>tag:porfiriopaiz.github.io,2018-11-29:/site/posts/2018/11/29/i3.html</id><summary type="html">&lt;p class="first last"&gt;Improved tiling wm&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In this post I will explain how to do a Fedora 29 installation with the i3
window manager. It is common to see installation guides for i3, but they assume
that you already have another desktop environment previously installed.&lt;/p&gt;
&lt;p&gt;In this post we will see how to build a fully functional environment from a
minimal installation as I have explained in other publications.&lt;/p&gt;
&lt;div class="section" id="creating-an-installation-medium"&gt;
&lt;h2&gt;Creating an installation medium&lt;/h2&gt;
&lt;div class="section" id="download-the-iso-fedora-everything-netinstall"&gt;
&lt;h3&gt;Download the ISO Fedora Everything Netinstall&lt;/h3&gt;
&lt;p&gt;From the site: &lt;a class="reference external" href="https://alt.fedoraproject.org/"&gt;https://alt.fedoraproject.org/&lt;/a&gt; download the file of the All
section, this is an ISO that works as a means of installation by network that
downloads all the packages that will be part of the system from the Internet,
as well as gives the option to choose which package collections to install,
unlike Lives media whose software selection has been previously defined.&lt;/p&gt;
&lt;p&gt;Download the ISO with wget:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;wget -N -t 0 -c https://download.fedoraproject.org/pub/fedora/linux/releases/29/Everything/x86_64/iso/Fedora-Everything-netinst-x86_64-29-1.2.iso&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also download the integrity check file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;wget -N -t 0 -c https://download.fedoraproject.org/pub/fedora/linux/releases/29/Everything/x86_64/iso/Fedora-Everything-29-1.2-x86_64-CHECKSUM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check the integrity of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sha256sum -c Fedora-Everything-29-1.2-x86_64-CHECKSUM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-the-installation-media-with-fedora-media-writer"&gt;
&lt;h3&gt;Create the installation media with Fedora Media Writer&lt;/h3&gt;
&lt;p&gt;Fedora Media Writer is available for different operating systems, download the
corresponding one.&lt;/p&gt;
&lt;p&gt;It is very important to create the installation medium with Fedora Media Writer
since this tool guarantees that the installation medium will have support to
boot on computers that have both UEFI or BIOS.&lt;/p&gt;
&lt;p&gt;How it will start will depend on which of the two has the highest priority
during startup. I always use UEFI only, so all my systems are installed in UEFI
mode.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/FedoraQt/MediaWriter/releases/tag/4.1.1"&gt;https://github.com/FedoraQt/MediaWriter/releases/tag/4.1.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When Fedora Media Writer is installed on our computer, we connect our USB
memory, run Fedora Media Writer and use the Custom Image option to navigate to
the path where the ISO is, the one we just downloaded, select it, select
carefully the USB memory we will use and record the image in the USB memory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;I have followed the installation steps described in this previous post, making
sure I have access to a wireless network or a wired network.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://porfiriopaiz.github.io/blog/posts/anaconda-y-lvm-sobre-luks.html"&gt;https://porfiriopaiz.github.io/blog/posts/anaconda-y-lvm-sobre-luks.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time I had to use my mobile phone, although it is true I had access to a
wireless network during the installation of the base system (Fedora Custom
Install), after installation the packages collection of does not provide the
network drivers required to access wireless networks since they are not
included in the Custom Install selection.&lt;/p&gt;
&lt;p&gt;That's why I created a wired network via USB with my mobile phone. To make it
work you have to make sure of the following right after the first boot once the
installation finishes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Log in in the system.&lt;/li&gt;
&lt;li&gt;Connect the USB cable to the computer.&lt;/li&gt;
&lt;li&gt;Connect the other end to the mobile phone.&lt;/li&gt;
&lt;li&gt;Make sure the phone is connected to a wireless network or that the data plan
is activated. As a note, consider that you need at least 800MB of data in
RPM packages that must be downloaded for a minimum installation of Fedora
with support for the graphical environment with i3wm.&lt;/li&gt;
&lt;li&gt;Make sure the phone is in USB or MTP data transfer mode.&lt;/li&gt;
&lt;li&gt;Activate a wired network or Tethered Wired Network from your mobile phone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After this, you should have access to the Internet. Check it by pinging Google:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;ping 8.8.8.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-configurations"&gt;
&lt;h2&gt;Basic configurations&lt;/h2&gt;
&lt;div class="section" id="configuring-dnf"&gt;
&lt;h3&gt;Configuring dnf&lt;/h3&gt;
&lt;p&gt;The next step is optional, as root, the first thing I do is configure dnf, so
that it uses the most efficient packages mirrors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;#39;fastestmirror=true&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I disable the use of deltarpm's for future updates. If you prefer to
reduce the amount of data to be downloaded in each of the future updates, skip
this step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;#39;deltarpm=false&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I always keep each of the packages from which any program is installed on my
system, including those that are downloaded as part of the updates and to
maintain the packages cache throughout the period I use a Fedora release. This
step is optional and you can skip it if you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;#39;keepcache=true&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I proceed to disable a service and a dnf timer. The service makes sure to
refresh the metadata cache to be able to make checks on the versions of the
packages that are in the repos and then check if there are updates available.
The timer is responsible for executing the service periodically.&lt;/p&gt;
&lt;p&gt;I always disable both to avoid annoying bandwidth consumptions and dnf locks
while the cache is refreshed. If you have a limited bandwidth or data plan this
will help you reduce the consumption of it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;systemctl disable dnf-makecache.service&lt;/span&gt;
&lt;span class="go"&gt;systemctl disable dnf-makecache.timer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally to make sure that the changes take effect we must restart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="regenerate-the-cache-and-install-available-updates"&gt;
&lt;h3&gt;Regenerate the cache and install available updates&lt;/h3&gt;
&lt;p&gt;During the installation, you may have omitted to check the option that allows
you to install the most recent version of the mirrors packages, so your system
could be outdated even if you have used the network installation medium.&lt;/p&gt;
&lt;p&gt;To apply the most recent updates and use the most efficient mirrors it is
necessary to regenerate the metadata cache.&lt;/p&gt;
&lt;p&gt;Fedora maintains a cache for each user, one for the root user, another for the
normal user, in my case pionen. So we must regenerate both caches if you want
to perform tasks as administrator or simple queries that do not require
administrator privileges:&lt;/p&gt;
&lt;p&gt;As a normal non-root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;dnf clean all&lt;/span&gt;

&lt;span class="go"&gt;dnf makecache&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, as a normal non-root user, we execute the following commands, where we
pass the statement in quotes as a parameter to the root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf clean all&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf makecache&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We check for available updates and enter our root password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf --refresh check-upgrade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are updates available, we apply them with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf upgrade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If updates have been applied, it is recommended to restart the system in order
to make use of the most recent version of all the programs, for example the
kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="dnf"></category><category term="fc29"></category><category term="fedora"></category><category term="postinstall"></category></entry><entry><title>Fedora 26 Custom Operating System post install</title><link href="https://porfiriopaiz.github.io/site/posts/2017/08/31/fedora-26-custom-operating-system-post-install.html" rel="alternate"></link><published>2017-08-31T16:26:00-06:00</published><updated>2017-08-31T16:26:00-06:00</updated><author><name>Porfirio PÃ¡iz</name></author><id>tag:porfiriopaiz.github.io,2017-08-31:/site/posts/2017/08/31/fedora-26-custom-operating-system-post-install.html</id><summary type="html"></summary><content type="html">&lt;p&gt;On the last post I explained how make a Minimal install of Fedora 25, months
has passed by since the last post and Fedora 26 was released, following the
same steps I installed it on my laptop and next I will document my postinstall.&lt;/p&gt;
&lt;p&gt;Given this is a minimal install, the set of packages installed does not
provides support for Wireless Network Cards. It is true that during the
installation process Anaconda provides such support, but once you have
installed the minimal set of packages, these does not provides the required
drivers, for this matter I must get my laptop connected to a Wired Network.&lt;/p&gt;
&lt;div class="section" id="dnf-configuration"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;dnf&lt;/tt&gt; configuration&lt;/h2&gt;
&lt;p&gt;After checking the Wired Network, first I did was to edit dnf's configuration
file and add the next lines to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo &amp;#39;fastestmirror=true&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;

&lt;span class="go"&gt;echo &amp;#39;deltarpm=false&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;

&lt;span class="go"&gt;echo &amp;#39;keepcache=true&amp;#39; &amp;gt;&amp;gt; /etc/dnf/dnf.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way I make sure &lt;tt class="docutils literal"&gt;dnf&lt;/tt&gt; will always use the more efficient mirror; will
not use &lt;cite&gt;*.drpm's&lt;/cite&gt; for upgrades, instead it will always download &lt;cite&gt;*.rpm's&lt;/cite&gt;; and
will keep any package it downloads in its cache.&lt;/p&gt;
&lt;p&gt;Now let's reboot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disablle-dnf-makecache-service-and-dnf-makecache-timer"&gt;
&lt;h2&gt;Disablle dnf-makecache.service and dnf-makecache.timer&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;dnf&lt;/tt&gt; has this service and timer that annoys me, both makes sure of keeping
the package metadata cache up to date with a certain frequence, this is
something I like to do when I want and when I need it, not at &lt;tt class="docutils literal"&gt;dnf&lt;/tt&gt; please,
so this behaviour is fixed with the next command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;systemctl disable dnf-makecache.service&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;systemctl disable dnf-makecache.timer&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's reboot again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rebuilding-packages-metadata-cache-s"&gt;
&lt;h2&gt;Rebuilding packages metadata cache's&lt;/h2&gt;
&lt;p&gt;Once &lt;tt class="docutils literal"&gt;dnf&lt;/tt&gt; configuration file is customized, service and timer are disabled,
I clean the old cache and rebuild it. This time the commands are run as normal
user, Fedora keeps two differents cache: one for the normal user and other for
the root user:&lt;/p&gt;
&lt;p&gt;This will rebuild packages metadata cache for my normal user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;dnf clean all&lt;/span&gt;

&lt;span class="go"&gt;dnf makecache&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will rebuild packages metadata cache for the root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf clean all&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf makecache&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="available-upgrades"&gt;
&lt;h2&gt;Available Upgrades&lt;/h2&gt;
&lt;p&gt;During the installation it is possible to mark a checkbox for the option to
download and install the packages with the most recent version, to verify if
there aren't any upgrades:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf --refresh check-upgrade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To download and apply the upgrades if availables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf upgrade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the upgrade let's reboot to make use of latest version of any package if
upgraded.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="workstation-product-environment-installation"&gt;
&lt;h2&gt;Workstation Product Environment Installation&lt;/h2&gt;
&lt;p&gt;On my laptop I use GNOME Shell as desktop environment, to install it I make use
of a package group that provides all the required packages to make of this
Fedora Custom Operating System install a Fedora Workstation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf group install workstation-product-environment&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="graphical-boot-mode"&gt;
&lt;h2&gt;Graphical Boot Mode&lt;/h2&gt;
&lt;p&gt;After downloading and installing all the packages, We must change the default
&lt;cite&gt;init&lt;/cite&gt; mode from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;multi-user.target&lt;/span&gt;&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;graphical.target&lt;/tt&gt;, otherwise, when
We reboot our system will not start in graphical mode.&lt;/p&gt;
&lt;p&gt;Also We must enable the service for the graphical login manager, if no, despite
enabling the graphical mode our login will still a text based prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;systemctl set-default graphical.target&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;systemctl enable gdm.service&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If nothing goes wrong, you might be running Fedora 26 Workstation with GNONE
Shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fixing-nautilus-behaviour"&gt;
&lt;h2&gt;Fixing Nautilus Behaviour&lt;/h2&gt;
&lt;p&gt;Before opening any other application, I like to fix how Nautilus sorts files, I
like to have them sorted by type or file extension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.gnome.nautilus.preferences default-sort-order type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way when opening Nautilus it will show the files sorted by extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="repositories"&gt;
&lt;h2&gt;Repositories&lt;/h2&gt;
&lt;div class="section" id="enabling-rpmfusion"&gt;
&lt;h3&gt;Enabling RPMFusion:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Refresh the cache, this will download the RPMFusion packages metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf check-upgrade&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="enabling-google-chrome-s-repository"&gt;
&lt;h3&gt;Enabling Google Chrome's repository:&lt;/h3&gt;
&lt;p&gt;I used to enable Google Chrome repository as explained on this post:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/"&gt;https://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But Mayorga presented me a more simple method, basically you just have to
download Google Chrome &lt;tt class="docutils literal"&gt;rpm&lt;/tt&gt; package, install it from the command line
indicating the path to the &lt;tt class="docutils literal"&gt;rpm&lt;/tt&gt; package and this by itself will add the
&lt;cite&gt;*.repo&lt;/cite&gt; file to the path &lt;tt class="docutils literal"&gt;/etc/yum.repos.d/&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;cd ~/Downloads&lt;/span&gt;

&lt;span class="go"&gt;wget -N -t 0 -c https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install google-chrome-stable_current_x86_64.rpm&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf check-update&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disabling-tracker"&gt;
&lt;h2&gt;Disabling Tracker&lt;/h2&gt;
&lt;p&gt;Before copying back any file from my back up's, hay must disable the annoying
&lt;tt class="docutils literal"&gt;tracker&lt;/tt&gt; and all his friends:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf install tracker-preferences&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;mkdir ~/.config/autostart&lt;/span&gt;

&lt;span class="go"&gt;cp /etc/xdg/autostart/tracker* ~/.config/autostart&lt;/span&gt;

&lt;span class="go"&gt;cd ~/.config/autostart&lt;/span&gt;

&lt;span class="go"&gt;sed -i &amp;#39;s/X-GNOME-Autostart-enabled=true/X-GNOME-Autostart-enabled=false/&amp;#39; tracker*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's check &lt;tt class="docutils literal"&gt;tracker&lt;/tt&gt; status:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;tracker status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we make a &lt;tt class="docutils literal"&gt;hard reset&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;tracker reset --hard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disabling-gnome-software-and-packagekit-download-updates"&gt;
&lt;h2&gt;Disabling GNOME Software and PackageKit download-updates&lt;/h2&gt;
&lt;p&gt;GNOME Software downloads metadata and upgrades for the system in background, to
disable it We execute the next commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.gnome.software download-updates false&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;systemctl mask packagekit.service&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should stop the autodownload upgrades and the PackageKit service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="libraries-and-development-tools"&gt;
&lt;h2&gt;Libraries and Development Tools&lt;/h2&gt;
&lt;p&gt;Now install the package groups that provides the required software and
libraries for compiling other software from source code, as well as making of
&lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; and &lt;cite&gt;IDE&lt;/cite&gt;, on another post I will explain how to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf -y groups install c-development&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf -y groups install development-libs&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf -y groups install development-tools&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf -y groups install fedora-packager&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf -y groups install rpm-development-tools&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install automake gcc gcc-c++ kernel-devel cmake&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install python-devel python3-devel&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install monodevelop&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install golang&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install nodejs&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install rust&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install cargo&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install python3-virtualenv&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install python3-pip&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally the spellcheckers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;dnf install hunspell&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install hunspell-en&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install hunspell-es&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install aspell&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install aspell-es&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install aspell-en&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install autocorr-es&amp;#39;&lt;/span&gt;

&lt;span class="go"&gt;su -c &amp;#39;dnf install autocorr-en&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the next post I will make shorts reviews on the other tools I use on Fedora.&lt;/p&gt;
&lt;/div&gt;
</content><category term="dnf"></category><category term="fc26"></category><category term="fedora"></category><category term="postinstall"></category></entry></feed>