<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>porfirio's blog - deb11</title><link>https://porfiriopaiz.github.io/site/</link><description/><atom:link href="https://porfiriopaiz.github.io/site/feeds/deb11.rss.xml" rel="self"/><lastBuildDate>Wed, 24 Sep 2025 20:20:00 -0600</lastBuildDate><item><title>Debian 12.12 Bookworm</title><link>https://porfiriopaiz.github.io/site/posts/2025/09/24/bookworm.html</link><description>&lt;p&gt;Placeholder&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Wed, 24 Sep 2025 20:20:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2025-09-24:/site/posts/2025/09/24/bookworm.html</guid><category>floss</category><category>debian</category><category>bullseye</category><category>deb11</category><category>bookworm</category><category>deb12</category></item><item><title>podman</title><link>https://porfiriopaiz.github.io/site/posts/2025/09/09/podman.html</link><description>&lt;p&gt;I have never used &lt;tt class="docutils literal"&gt;podman&lt;/tt&gt; on Debian before, and I will be adopting it for
handling my blog's Python environment necessary for the Pelican site generator
that it uses.&lt;/p&gt;
&lt;div class="section" id="install-podman"&gt;
&lt;h2&gt;Install &lt;tt class="docutils literal"&gt;podman&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;For the installation process, I referred to the Debian Wiki:
&lt;a class="reference external" href="https://wiki.debian.org/Podman"&gt;https://wiki.debian.org/Podman&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This command will install &lt;tt class="docutils literal"&gt;podman&lt;/tt&gt; and its dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;apt-get install podman crun&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;div class="section" id="specify-registries-for-unqualified-searches"&gt;
&lt;h3&gt;Specify registries for unqualified searches&lt;/h3&gt;
&lt;p&gt;From the Debian Wiki: A &lt;em&gt;registry&lt;/em&gt; is a site you download &lt;em&gt;container images&lt;/em&gt;
from, similar to how a &lt;em&gt;Debian repository&lt;/em&gt; is a site you download &lt;em&gt;.deb
packages&lt;/em&gt; from. However, whereas &lt;tt class="docutils literal"&gt;apt&lt;/tt&gt; searches all Debian repositories,
&lt;tt class="docutils literal"&gt;podman&lt;/tt&gt; expects you to &lt;em&gt;qualify&lt;/em&gt; which registry you want to search.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;No&lt;span class="w"&gt; &lt;/span&gt;qualifier&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;returns&lt;span class="w"&gt; &lt;/span&gt;nothing:
&lt;span class="go"&gt;podman search podman&lt;/span&gt;

&lt;span class="gp"&gt;# &lt;/span&gt;Registry&lt;span class="w"&gt; &lt;/span&gt;qualifier&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;returns&lt;span class="w"&gt; &lt;/span&gt;several&lt;span class="w"&gt; &lt;/span&gt;matches:
&lt;span class="go"&gt;podman search quay.io/podman&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make unqualified searches useful, you need to set a list of
&lt;em&gt;unqualified-search registries&lt;/em&gt;. To set your unqualified-search registries, add
a line like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;unqualified-search-registries=[&amp;quot;docker.io&amp;quot;,&lt;/span&gt; &amp;quot;quay.io&amp;quot;]&lt;/tt&gt; in either
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/containers/registries.conf&lt;/span&gt;&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;/etc/containers/registries.conf&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;With these simple changes, I'm now able to build Podman images from
&lt;em&gt;Containerfiles&lt;/em&gt; (or &lt;em&gt;Dockerfiles&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Tue, 09 Sep 2025 05:38:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2025-09-09:/site/posts/2025/09/09/podman.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>podman</category></item><item><title>Debian Age</title><link>https://porfiriopaiz.github.io/site/posts/2025/08/24/debian-age.html</link><description>&lt;div class="section" id="how-to-find-the-installation-date-of-debian"&gt;
&lt;h2&gt;How to Find the Installation Date of Debian&lt;/h2&gt;
&lt;p&gt;Have you ever needed to know the exact date a Debian-based system was installed?
Whether for troubleshooting, system auditing, or just out of curiosity, this
information can be useful. While there isn't a single file named
&amp;quot;installation-date,&amp;quot; you can reliably find this information by consulting the
installer's logs or by checking the creation date of the root filesystem.&lt;/p&gt;
&lt;p&gt;Here's how to do it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Using the Installer Syslog:&lt;/p&gt;
&lt;p&gt;Debian-based systems typically log installation details in
&lt;tt class="docutils literal"&gt;/var/log/installer/syslog&lt;/tt&gt;. The very first entry in this file corresponds
to the start of the installation process, giving you a precise date.&lt;/p&gt;
&lt;p&gt;To view the first line, use the &lt;tt class="docutils literal"&gt;head&lt;/tt&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;head -n 1 /var/log/installer/syslog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Checking Filesystem Creation Date:&lt;/p&gt;
&lt;p&gt;The creation date of the root filesystem is another excellent indicator of the
installation date. This method is particularly useful if the installer logs
are unavailable or incomplete.&lt;/p&gt;
&lt;p&gt;First, identify your root partition (e.g., &lt;tt class="docutils literal"&gt;/dev/sda1&lt;/tt&gt;). Then, use
&lt;tt class="docutils literal"&gt;tune2fs&lt;/tt&gt; to display filesystem information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo tune2fs -l /dev/sda1 | grep &amp;#39;Filesystem created:&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember to replace &lt;tt class="docutils literal"&gt;/dev/sda1&lt;/tt&gt; with your actual root partition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Note: While &lt;tt class="docutils literal"&gt;stat &lt;span class="pre"&gt;-c&lt;/span&gt; %w /&lt;/tt&gt; can show the &amp;quot;birth time&amp;quot; of the root directory,
this may not always align precisely with the OS installation date, especially
if the root directory's creation time was modified after installation. For the
most reliable information, the installer syslog or filesystem creation date
provides a more dependable indication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using these two straightforward methods, you can quickly and accurately
determine the installation date of any Debian-based system.&lt;/p&gt;
&lt;p&gt;And here is mine, my current Debian 11.11 has been installed on &lt;tt class="docutils literal"&gt;May 27
17:59:58 syslogd started: BusyBox v1.30.1&lt;/tt&gt;, notice this is in local time zone
during the installation, probably when it started.&lt;/p&gt;
&lt;p&gt;And &lt;tt class="docutils literal"&gt;Filesystem created:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Fri May 28 00:56:56 2021&lt;/tt&gt; is when the
installation was already completed, the time stamps are in UTC time zone.&lt;/p&gt;
&lt;img alt="Debian Age screenshot" class="align-center" src="https://porfiriopaiz.github.io/site/images/debian_age/screenshot_at_2025-08-24_01-40-08.png" /&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Sun, 24 Aug 2025 01:17:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2025-08-24:/site/posts/2025/08/24/debian-age.html</guid><category>floss</category><category>cli</category><category>deb11</category><category>debian</category></item><item><title>vim</title><link>https://porfiriopaiz.github.io/site/posts/2023/09/11/vim.html</link><description>&lt;div class="section" id="understanding-vim-on-debian"&gt;
&lt;h2&gt;Understanding &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; on Debian&lt;/h2&gt;
&lt;p&gt;Now that I understand how Debian manages &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; and I've grasped
the purpose of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-tiny&lt;/span&gt;&lt;/tt&gt; package, it's time to determine the
requirements for obtaining a more advanced &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; binary with enhanced
features or support for additional functionalities.&lt;/p&gt;
&lt;p&gt;A brief search for additional information on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-tiny&lt;/span&gt;&lt;/tt&gt; suggests various
alternatives for a more comprehensive &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; experience:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;apt-cache&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;vim-tiny
&lt;span class="go"&gt;Package: vim-tiny&lt;/span&gt;
&lt;span class="go"&gt;Source: vim&lt;/span&gt;
&lt;span class="go"&gt;Version: 2:8.2.2434-3+deb11u1&lt;/span&gt;
&lt;span class="go"&gt;Installed-Size: 1574&lt;/span&gt;
&lt;span class="go"&gt;Maintainer: Debian Vim Maintainers &amp;lt;team+vim@tracker.debian.org&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Architecture: amd64&lt;/span&gt;
&lt;span class="go"&gt;Provides: editor&lt;/span&gt;
&lt;span class="go"&gt;Depends: vim-common (= 2:8.2.2434-3+deb11u1), libacl1 (&amp;gt;= 2.2.23), libc6 (&amp;gt;= 2.15), libselinux1 (&amp;gt;= 3.1~), libtinfo6 (&amp;gt;= 6)&lt;/span&gt;
&lt;span class="go"&gt;Suggests: indent&lt;/span&gt;
&lt;span class="go"&gt;Description-en: Vi IMproved - enhanced vi editor - compact version&lt;/span&gt;
&lt;span class="go"&gt; Vim is an almost compatible version of the UNIX editor Vi.&lt;/span&gt;
&lt;span class="go"&gt; .&lt;/span&gt;
&lt;span class="go"&gt; This package contains a minimal version of Vim compiled with no GUI and&lt;/span&gt;
&lt;span class="go"&gt; a small subset of features. This package&amp;#39;s sole purpose is to provide&lt;/span&gt;
&lt;span class="go"&gt; the vi binary for base installations.&lt;/span&gt;
&lt;span class="go"&gt; .&lt;/span&gt;
&lt;span class="go"&gt; If a vim binary is wanted, try one of the following more featureful&lt;/span&gt;
&lt;span class="go"&gt; packages: vim, vim-nox, vim-athena, or vim-gtk3.&lt;/span&gt;
&lt;span class="go"&gt;Description-md5: 85f2dbef1339af3dcf83d9ee00fd5e22&lt;/span&gt;
&lt;span class="go"&gt;Homepage: https://www.vim.org/&lt;/span&gt;
&lt;span class="go"&gt;Tag: devel::editor, implemented-in::c, interface::text-mode, role::program,&lt;/span&gt;
&lt;span class="go"&gt; uitoolkit::ncurses, use::editing, works-with::text, works-with::unicode&lt;/span&gt;
&lt;span class="go"&gt;Section: editors&lt;/span&gt;
&lt;span class="go"&gt;Priority: important&lt;/span&gt;
&lt;span class="go"&gt;Filename: pool/main/v/vim/vim-tiny_8.2.2434-3+deb11u1_amd64.deb&lt;/span&gt;
&lt;span class="go"&gt;Size: 744284&lt;/span&gt;
&lt;span class="go"&gt;MD5sum: 3b101104ccb4e8367298e4ea9dc33d27&lt;/span&gt;
&lt;span class="go"&gt;SHA256: 0cfc3ce179181f9c08f8460360a8bcba05c214d75ba51d78ecf021e42c9a4261&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running both &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cache&lt;/span&gt; show &lt;span class="pre"&gt;vim-athena&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cache&lt;/span&gt; show &lt;span class="pre"&gt;vim-gtk3&lt;/span&gt;&lt;/tt&gt;
reveals that both packages offer a graphical user interface, which I neither
desire nor require.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cache&lt;/span&gt; show vim&lt;/tt&gt; displays information that suggests this could be the
solution I've been searching for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;apt-cache&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;vim
&lt;span class="go"&gt;Package: vim&lt;/span&gt;
&lt;span class="go"&gt;Version: 2:8.2.2434-3+deb11u1&lt;/span&gt;
&lt;span class="go"&gt;Installed-Size: 3286&lt;/span&gt;
&lt;span class="go"&gt;Maintainer: Debian Vim Maintainers &amp;lt;team+vim@tracker.debian.org&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Architecture: amd64&lt;/span&gt;
&lt;span class="go"&gt;Provides: editor&lt;/span&gt;
&lt;span class="go"&gt;Depends: vim-common (= 2:8.2.2434-3+deb11u1), vim-runtime (= 2:8.2.2434-3+deb11u1), libacl1 (&amp;gt;= 2.2.23), libc6 (&amp;gt;= 2.29), libgpm2 (&amp;gt;= 1.20.7), libselinux1 (&amp;gt;= 3.1~), libtinfo6 (&amp;gt;= 6)&lt;/span&gt;
&lt;span class="go"&gt;Suggests: ctags, vim-doc, vim-scripts&lt;/span&gt;
&lt;span class="go"&gt;Description-en: Vi IMproved - enhanced vi editor&lt;/span&gt;
&lt;span class="go"&gt; Vim is an almost compatible version of the UNIX editor Vi.&lt;/span&gt;
&lt;span class="go"&gt; .&lt;/span&gt;
&lt;span class="go"&gt; Many new features have been added: multi level undo, syntax&lt;/span&gt;
&lt;span class="go"&gt; highlighting, command line history, on-line help, filename&lt;/span&gt;
&lt;span class="go"&gt; completion, block operations, folding, Unicode support, etc.&lt;/span&gt;
&lt;span class="go"&gt; .&lt;/span&gt;
&lt;span class="go"&gt; This package contains a version of vim compiled with a rather&lt;/span&gt;
&lt;span class="go"&gt; standard set of features. This package does not provide a GUI&lt;/span&gt;
&lt;span class="go"&gt; version of Vim. See the other vim-* packages if you need more&lt;/span&gt;
&lt;span class="go"&gt; (or less).&lt;/span&gt;
&lt;span class="go"&gt;Description-md5: 59e8b8f7757db8b53566d5d119872de8&lt;/span&gt;
&lt;span class="go"&gt;Homepage: https://www.vim.org/&lt;/span&gt;
&lt;span class="go"&gt;Tag: devel::editor, implemented-in::c, interface::commandline,&lt;/span&gt;
&lt;span class="go"&gt; interface::text-mode, role::program, scope::application,&lt;/span&gt;
&lt;span class="go"&gt; uitoolkit::ncurses, use::editing, works-with::text, works-with::unicode&lt;/span&gt;
&lt;span class="go"&gt;Section: editors&lt;/span&gt;
&lt;span class="go"&gt;Priority: optional&lt;/span&gt;
&lt;span class="go"&gt;Filename: pool/main/v/vim/vim_8.2.2434-3+deb11u1_amd64.deb&lt;/span&gt;
&lt;span class="go"&gt;Size: 1494176&lt;/span&gt;
&lt;span class="go"&gt;MD5sum: f74e7886b6610f74d06c789eeb144b9c&lt;/span&gt;
&lt;span class="go"&gt;SHA256: b06d11fdee525b919deb4778f7af352ebf3d6ce2591c8fb8e02e52f1ae90ef7d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cache&lt;/span&gt; show &lt;span class="pre"&gt;vim-nox&lt;/span&gt;&lt;/tt&gt; reveals that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-nox&lt;/span&gt;&lt;/tt&gt; provides support for
scripting languages, including Python, which is absent in the minimal &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;
package.&lt;/p&gt;
&lt;p&gt;So, I installed it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;quot;apt-get install vim-nox&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing I noticed after installing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-nox&lt;/span&gt;&lt;/tt&gt; is that now &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt;
points to &lt;tt class="docutils literal"&gt;vim.nox&lt;/tt&gt;, meaning that when running &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; it actually runs
&lt;tt class="docutils literal"&gt;vim.nox&lt;/tt&gt;, which was unexpected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;whereis&lt;span class="w"&gt; &lt;/span&gt;vi
&lt;span class="go"&gt;vi: /usr/bin/vi /usr/share/man/man1/vi.1.gz&lt;/span&gt;
&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/vi
&lt;span class="go"&gt;lrwxrwxrwx 1 root root 20 May 28  2021 /usr/bin/vi -&amp;gt; /etc/alternatives/vi&lt;/span&gt;
&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/etc/alternatives/vi
&lt;span class="go"&gt;lrwxrwxrwx 1 root root 16 Oct 12  2022 /etc/alternatives/vi -&amp;gt; /usr/bin/vim.nox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I struggled to find a fix for this, but I eventually found the solution:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://superuser.com/questions/852177/why-does-the-vi-command-open-vim-editor/852219#852219"&gt;https://superuser.com/questions/852177/why-does-the-vi-command-open-vim-editor/852219#852219&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just needed to run &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; and pass some parameters to avoid loading
additional features:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;vim -u NONE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Later, I found the same suggestion in the &lt;tt class="docutils literal"&gt;/usr/share/vim/vim82/defaults.vim&lt;/tt&gt;
file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;quot; This is loaded if no vimrc file was found.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Except when Vim is run with &amp;quot;-u NONE&amp;quot; or &amp;quot;-C&amp;quot;.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Individual settings can be reverted with &amp;quot;:set option&amp;amp;&amp;quot;.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Other commands can be reverted as mentioned below.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This setup allows me to run &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; without loading any additional features from
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-nox&lt;/span&gt;&lt;/tt&gt;, which is useful for quick edits without plugins. To simplify this,
I added the following alias to my &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_aliases&lt;/span&gt;&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Alias to run vi without additional features&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;vi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vim -u NONE&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this configuration, I'm all set! In a future post, I’ll share my
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt; file and its configuration details.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Mon, 11 Sep 2023 04:39:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2023-09-11:/site/posts/2023/09/11/vim.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>vim</category></item><item><title>vi</title><link>https://porfiriopaiz.github.io/site/posts/2022/10/31/vi.html</link><description>&lt;div class="section" id="understanding-vi-and-vim-on-debian"&gt;
&lt;h2&gt;Understanding &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; on Debian&lt;/h2&gt;
&lt;p&gt;Since 2011, I have steadfastly embraced &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; as my primary text editor. My
journey into mastering the command-line interface and transitioning away from
the comfort of the graphical user interface began early. Among the foundational
skills I sought to acquire, efficient text file editing was one of the first.&lt;/p&gt;
&lt;p&gt;Surprisingly, the exact catalyst that led me to embrace &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; has faded into
the distant recesses of my memory. Nevertheless, over eleven years later, my
loyalty to &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; remains unwavering. It has been a constant companion
throughout my journey, and I have never strayed into the world of alternative
text editors. I have even used &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; for basic Python programming tasks,
underscoring its versatility and enduring utility in my daily computing
endeavors.&lt;/p&gt;
&lt;p&gt;In this post, I will delve into the intricacies of how Debian manages the
functionality of &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; in a basic, uncustomized Debian
installation.&lt;/p&gt;
&lt;p&gt;My objective is to gain a profound understanding of the default behavior of
&lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; in their most minimalist configurations, as presented
immediately after a fresh Debian installation.&lt;/p&gt;
&lt;p&gt;It's worth noting that Debian does not include &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; by default in this
setup. I opted for a network installation using the minimal tasksel profile,
selecting only the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mate-desktop-environment&lt;/span&gt;&lt;/tt&gt; package. This highlights one of
the aspects I greatly appreciate about Debian—its commitment to providing
essential software components while allowing users to shape and personalize
their tools and environments without presumption.&lt;/p&gt;
&lt;div class="section" id="vi-1"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;vi&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;A pristine Debian installation includes only the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-tiny&lt;/span&gt;&lt;/tt&gt; package. Within
this package, two critical configuration files are stored in &lt;tt class="docutils literal"&gt;/etc/vim/&lt;/tt&gt;:
&lt;tt class="docutils literal"&gt;vimrc&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vimrc.tiny&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This setup is intentionally minimalist, devoid of any symbolic links, aliases,
or binary files associated with &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;. The only alias present is &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt;,
which is linked to &lt;tt class="docutils literal"&gt;vim.tiny&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; is invoked, it calls &lt;tt class="docutils literal"&gt;vim.tiny&lt;/tt&gt;, which, by default, sources the
file located at &lt;tt class="docutils literal"&gt;/etc/vim/vimrc.tiny&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, let's explore the contents of the &lt;tt class="docutils literal"&gt;/etc/vim/vimrc.tiny&lt;/tt&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;quot; Vim configuration file in effect when invoked as &amp;#39;vi&amp;#39;. This configuration&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; aims to provide a Vim environment as compatible with the original &amp;#39;vi&amp;#39; as possible.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Note that ~/.vimrc and other runtimepath configuration files are still sourced.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; When Vim is invoked as &amp;#39;vim&amp;#39;, &amp;#39;view&amp;#39;, &amp;#39;evim&amp;#39;, etc., this file is _not_ sourced.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; In such cases, /etc/vim/vimrc and/or /etc/vim/gvimrc are used.&lt;/span&gt;

&lt;span class="go"&gt;set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after&lt;/span&gt;
&lt;span class="go"&gt;set compatible&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; vim: set ft=vim:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration ensures that &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; (invoking &lt;tt class="docutils literal"&gt;vim.tiny&lt;/tt&gt;) mimics the
original &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt;. It also loads configuration files from the &lt;tt class="docutils literal"&gt;$VIMRUNTIME&lt;/tt&gt;
directory, including &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt; and other runtimepath files. Specifically, it
prioritizes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/usr/share/vim/vim82/debian.vim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/usr/share/vim/vim82/defaults.vim&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the &lt;tt class="docutils literal"&gt;set compatible&lt;/tt&gt; directive ensures compatibility with the
original &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt;, even if other configurations attempt to disable it.&lt;/p&gt;
&lt;p&gt;By default, &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; links to &lt;tt class="docutils literal"&gt;vim.tiny&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;ls&lt;span class="w"&gt; &lt;/span&gt;-la&lt;span class="w"&gt; &lt;/span&gt;/etc/alternatives/vi
&lt;span class="go"&gt;lrwxrwxrwx 1 root root 16 Oct 12  2022 /etc/alternatives/vi -&amp;gt; /usr/bin/vim.tiny&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; is explicitly installed, additional aliases (e.g., &lt;tt class="docutils literal"&gt;view&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;evim&lt;/tt&gt;) and configuration files, such as &lt;tt class="docutils literal"&gt;/etc/vim/vimrc&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;/etc/gvimrc&lt;/tt&gt;, become active. These configurations enable enhanced features:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;runtime! debian.vim&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Uncomment below to make Vim more Vi-compatible.&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; set compatible&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; Syntax highlighting example:&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; syntax on&lt;/span&gt;

&lt;span class="go"&gt;&amp;quot; Enable additional plugins or rules:&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; filetype plugin indent on&lt;/span&gt;

&lt;span class="go"&gt;&amp;quot; Uncomment to remember the last position in a file:&lt;/span&gt;
&lt;span class="go"&gt;&amp;quot; au BufReadPost * if line(&amp;quot;&amp;#39;\&amp;quot;&amp;quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;quot;&amp;#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) | exe &amp;quot;normal! g&amp;#39;\&amp;quot;&amp;quot; | endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;, you can check the runtime path and sourced scripts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;:echo $VIMRUNTIME&lt;/span&gt;
&lt;span class="go"&gt;/usr/share/vim/vim82&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;:scriptnames&lt;/span&gt;
&lt;span class="go"&gt;1: /usr/share/vim/vimrc&lt;/span&gt;
&lt;span class="go"&gt;2: /usr/share/vim/vim82/debian.vim&lt;/span&gt;
&lt;span class="go"&gt;3: ~/.vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This confirms that user-defined configurations in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt; override
defaults. Any required settings from &lt;tt class="docutils literal"&gt;/usr/share/vim/vim82/defaults.vim&lt;/tt&gt;
should be manually incorporated into &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vimrc&lt;/span&gt;&lt;/tt&gt; if needed.&lt;/p&gt;
&lt;p&gt;In the next post, I will explain my choice of &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; versions available in the
Debian repository and the rationale behind my selection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Mon, 31 Oct 2022 03:32:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2022-10-31:/site/posts/2022/10/31/vi.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>vi</category></item><item><title>JOSM</title><link>https://porfiriopaiz.github.io/site/posts/2021/07/22/josm.html</link><description>&lt;p&gt;JOSM is, in my opinion, the best editor for OpenStreetMap I have ever used, and
it is also the best Java software I have ever used.&lt;/p&gt;
&lt;p&gt;In this post, I will cover how to get it installed on Debian, how to properly
configure it for mapping on OSM, and which plugins to install and use.&lt;/p&gt;
&lt;div class="section" id="installing-josm-on-debian"&gt;
&lt;h2&gt;Installing JOSM on Debian&lt;/h2&gt;
&lt;p&gt;JOSM is available in the Debian official repository, so to install it, you just
need to open a terminal and run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;apt-get install josm&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="solving-josm-outdated-version-on-debian"&gt;
&lt;h2&gt;Solving JOSM Outdated Version on Debian&lt;/h2&gt;
&lt;p&gt;Installing JOSM from the official Debian repositories resolves the dependency
issue you would encounter when using the most up-to-date version from the
official .jar build.&lt;/p&gt;
&lt;p&gt;To run the latest stable version, you need to download it from the official
JOSM website as a JAR file. However, before doing that, you need to run the
version installed from the Debian repository at least once.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;josm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create the following directory structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;~/.config/JOSM&lt;/span&gt;
&lt;span class="go"&gt;~/.cache/JOSM&lt;/span&gt;
&lt;span class="go"&gt;~/.local/share/JOSM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Under &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/JOSM/&lt;/span&gt;&lt;/tt&gt;, a directory named &lt;tt class="docutils literal"&gt;jar&lt;/tt&gt; will be created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;mkdir -p ~/.cache/JOSM/jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, navigate to that directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;cd ~/.cache/JOSM/jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, download the latest version of the JOSM editor using wget:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;wget -N -t 0 -c https://josm.openstreetmap.de/josm-tested.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run the newly downloaded version, use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;java -jar ~/.cache/JOSM/jar/josm-tested.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="script-launcher"&gt;
&lt;h2&gt;Script Launcher&lt;/h2&gt;
&lt;p&gt;To launch the JAR file easily, you can create a script. First, create an
executable file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;touch ~/.local/bin/tested-josm.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add the following content to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt;!&lt;span class="w"&gt; &lt;/span&gt;/bin/bash
&lt;span class="go"&gt;java -jar ~/.cache/JOSM/jar/josm-tested.jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-launcher"&gt;
&lt;h2&gt;Adding a Launcher&lt;/h2&gt;
&lt;p&gt;To make this process even easier, let's create a launcher for the manually
downloaded JOSM JAR file and the previously created script.&lt;/p&gt;
&lt;p&gt;Create a new desktop entry file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;touch ~/.local/share/applications/org.openstreetmap.josm.desktop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, add the following content to the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[Desktop Entry]&lt;/span&gt;
&lt;span class="go"&gt;Type=Application&lt;/span&gt;
&lt;span class="go"&gt;Version=1.0&lt;/span&gt;
&lt;span class="go"&gt;Name=JOSM Tested&lt;/span&gt;
&lt;span class="go"&gt;GenericName=Java OpenStreetMap Editor&lt;/span&gt;
&lt;span class="go"&gt;Comment=Extensible off-line editor for OpenStreetMap (OSM)&lt;/span&gt;
&lt;span class="go"&gt;Icon=org.openstreetmap.josm&lt;/span&gt;
&lt;span class="go"&gt;Exec=/home/pionen/.local/bin/tested-josm.sh&lt;/span&gt;
&lt;span class="go"&gt;Terminal=false&lt;/span&gt;
&lt;span class="go"&gt;MimeType=application/x-osm+xml;application/x-gpx+xml;application/geo+json;application/x-josm-session+xml;application/x-josm-session+zip;x-scheme-handler/geo;&lt;/span&gt;
&lt;span class="go"&gt;StartupNotify=true&lt;/span&gt;
&lt;span class="go"&gt;Categories=Education;Geoscience;Maps;&lt;/span&gt;
&lt;span class="go"&gt;StartupWMClass=org-openstreetmap-josm-MainApplication&lt;/span&gt;
&lt;span class="go"&gt;Keywords=OpenStreetMap;OSM;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next time you restart your computer, you will find the new launcher. By
clicking on it, you will launch the most up-to-date version of JOSM on Debian.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Thu, 22 Jul 2021 20:46:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2021-07-22:/site/posts/2021/07/22/josm.html</guid><category>gis</category><category>deb11</category><category>debian</category><category>josm</category></item><item><title>Mate Desktop on Debian</title><link>https://porfiriopaiz.github.io/site/posts/2021/07/22/mate-desktop-on-debian.html</link><description>&lt;div class="section" id="mate-desktop-tips-and-tricks"&gt;
&lt;h2&gt;Mate Desktop Tips and Tricks&lt;/h2&gt;
&lt;div class="section" id="notify-battery-discharging"&gt;
&lt;h3&gt;Notify Battery Discharging&lt;/h3&gt;
&lt;p&gt;Enable notification when the battery is discharging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.power-manager notify-discharging true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-window-compositing"&gt;
&lt;h3&gt;Enable Window Compositing&lt;/h3&gt;
&lt;p&gt;Turn on window compositing for better visual effects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.Marco.general compositing-manager true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="center-new-windows"&gt;
&lt;h3&gt;Center New Windows&lt;/h3&gt;
&lt;p&gt;Automatically center new windows on the screen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.Marco.general center-new-windows true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-window-snapping"&gt;
&lt;h3&gt;Enable Window Snapping&lt;/h3&gt;
&lt;p&gt;Allow window snapping for better workspace management:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.Marco.general allow-tiling true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hide-all-desktop-icons"&gt;
&lt;h3&gt;Hide All Desktop Icons&lt;/h3&gt;
&lt;p&gt;Remove all desktop icons for a cleaner look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.background show-desktop-icons false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-window-button-layout"&gt;
&lt;h3&gt;Customize Window Button Layout&lt;/h3&gt;
&lt;p&gt;Modify the order of window decoration buttons:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.Marco.general button-layout &amp;#39;close,maximize,minimize:menu&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disable-auto-mount-open"&gt;
&lt;h3&gt;Disable Auto-Mount Open&lt;/h3&gt;
&lt;p&gt;Prevent the file manager from opening automatically on mounting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.media-handling automount-open false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disable-auto-mounting"&gt;
&lt;h3&gt;Disable Auto-Mounting&lt;/h3&gt;
&lt;p&gt;Turn off automatic mounting of devices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.media-handling automount false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="caja-file-manager-preferences"&gt;
&lt;h3&gt;Caja File Manager Preferences&lt;/h3&gt;
&lt;div class="section" id="set-default-sorting-order"&gt;
&lt;h4&gt;Set Default Sorting Order&lt;/h4&gt;
&lt;p&gt;Change the default sorting order to &amp;quot;type&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.caja.preferences default-sort-order &amp;#39;type&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sort-directories-first"&gt;
&lt;h4&gt;Sort Directories First&lt;/h4&gt;
&lt;p&gt;Ensure directories are always sorted first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.caja.preferences sort-directories-first true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-appearance"&gt;
&lt;h3&gt;Customize Appearance&lt;/h3&gt;
&lt;div class="section" id="set-icon-theme"&gt;
&lt;h4&gt;Set Icon Theme&lt;/h4&gt;
&lt;p&gt;Choose an icon theme, e.g., &amp;quot;gnome&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.interface icon-theme &amp;#39;gnome&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="set-gtk-theme"&gt;
&lt;h4&gt;Set GTK Theme&lt;/h4&gt;
&lt;p&gt;Select a GTK theme, e.g., &amp;quot;Arc-Dark&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.interface gtk-theme &amp;#39;Arc-Dark&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="set-window-border-theme"&gt;
&lt;h4&gt;Set Window Border Theme&lt;/h4&gt;
&lt;p&gt;Define the theme for window borders:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;gsettings set org.mate.Marco.general theme &amp;#39;Arc-Dark&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Thu, 22 Jul 2021 19:11:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2021-07-22:/site/posts/2021/07/22/mate-desktop-on-debian.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>mate-desktop</category></item><item><title>UTC</title><link>https://porfiriopaiz.github.io/site/posts/2021/07/15/utc.html</link><description>&lt;p&gt;When I was installing Debian on my Lenovo ThinkPad T440p, I could not find the
option to set up the local time, RTC time, and time zone to UTC as the
default configuration.&lt;/p&gt;
&lt;p&gt;To fix this, I need to run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;timedatectl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This lists the current configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;timedatectl
&lt;span class="go"&gt;               Local time: Thu 2021-07-15 14:45:28 CST&lt;/span&gt;
&lt;span class="go"&gt;           Universal time: Thu 2021-07-15 20:45:28 UTC&lt;/span&gt;
&lt;span class="go"&gt;                 RTC time: Thu 2021-07-15 20:44:47&lt;/span&gt;
&lt;span class="go"&gt;                Time zone: America/Managua (CST, -0600)&lt;/span&gt;
&lt;span class="go"&gt;System clock synchronized: yes&lt;/span&gt;
&lt;span class="go"&gt;              NTP service: active&lt;/span&gt;
&lt;span class="go"&gt;          RTC in local TZ: yes&lt;/span&gt;

&lt;span class="go"&gt;Warning: The system is configured to read the RTC time in the local time zone.&lt;/span&gt;
&lt;span class="go"&gt;         This mode cannot be fully supported. It will create various problems&lt;/span&gt;
&lt;span class="go"&gt;         with time zone changes and daylight saving time adjustments. The RTC&lt;/span&gt;
&lt;span class="go"&gt;         time is never updated; it relies on external facilities to maintain it.&lt;/span&gt;
&lt;span class="go"&gt;         If at all possible, use RTC in UTC by calling&lt;/span&gt;
&lt;span class="go"&gt;         &amp;#39;timedatectl set-local-rtc 0&amp;#39;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, let's update the RTC to use UTC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;timedatectl set-local-rtc 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, let's set the time zone and the local time zone to UTC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;timedatectl set-timezone UTC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, our system will be fully synchronized with UTC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;timedatectl
&lt;span class="go"&gt;               Local time: Thu 2021-07-15 21:31:52 UTC&lt;/span&gt;
&lt;span class="go"&gt;           Universal time: Thu 2021-07-15 21:31:52 UTC&lt;/span&gt;
&lt;span class="go"&gt;                 RTC time: Thu 2021-07-15 21:31:52&lt;/span&gt;
&lt;span class="go"&gt;                Time zone: UTC (UTC, +0000)&lt;/span&gt;
&lt;span class="go"&gt;System clock synchronized: yes&lt;/span&gt;
&lt;span class="go"&gt;              NTP service: active&lt;/span&gt;
&lt;span class="go"&gt;          RTC in local TZ: no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Thu, 15 Jul 2021 20:53:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2021-07-15:/site/posts/2021/07/15/utc.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>timedatectl</category><category>utc</category></item><item><title>K8</title><link>https://porfiriopaiz.github.io/site/posts/2021/07/14/k8.html</link><description>&lt;p&gt;Back in February, Guido van Rossum posted on Twitter a picture of his desk with
a large mouse pad.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/gvanrossum/status/1365796969617104897"&gt;Guido van Rossum's tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What got my attention from this picture was the keyboard. Down in the comment
section, I found the manufacturer and model of this keyboard.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.keychron.com/products/keychron-k8-tenkeyless-wireless-mechanical-keyboard?variant=32018253021273"&gt;Keychron K8 Product&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have always wanted to try mechanical keyboards but never knew
exactly which one to get or try. Seeing that this is the preferred one from a
respectable developer, I decided to go for this same model.&lt;/p&gt;
&lt;p&gt;The very specific configuration I wanted was not available at the time I was
ordering it, so I subscribed to get a notification via email when the
same configuration became available again.&lt;/p&gt;
&lt;p&gt;I ordered mine on June 3rd, the keyboard was shipped from Hong Kong to Miami
and arrived in the next 5 days. The keyboard arrived in Nicaragua 25 days
later.&lt;/p&gt;
&lt;p&gt;The first thing I tried to do was to set up the keyboard with my T440p running
Debian 11 Bullseye via Bluetooth. For this, I installed Blueman, which provides
a MATE applet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;apt-get install blueman&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the switches on the keyboard set to Windows and Bluetooth, the Blueman
applet running, and following the instructions in the booklet included in the box,
I was able to pair my Keychron K8 via Bluetooth with my T440p running Debian.&lt;/p&gt;
&lt;p&gt;I had to manually add my keyboard as a new device with the applet and then pair
both devices.&lt;/p&gt;
&lt;p&gt;Over Bluetooth and in Windows mode, the swap from multimedia keys to function
keys worked, but in wired mode, this did not work.&lt;/p&gt;
&lt;p&gt;I found some hints on how to fix this in the official Facebook support group
for Linux users of Keychron, which led me to this very specific command that must
be run on every startup so that the primary option for the F1 to F12 keys
becomes function keys instead of multimedia keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo 0 | sudo tee /sys/module/hid_apple/parameters/fnmode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Later, I found this documentation that provides at least 3 different ways to
ensure this command is executed on every startup:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.ubuntu.com/community/AppleKeyboard#Change_Function_Key_behavior"&gt;Ubuntu Keyboard Configuration Help&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the 3 options listed there, I decided to go for the one that makes use of
the sysfs.conf file. So, I installed &lt;tt class="docutils literal"&gt;sysfsutils&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;apt-get install sysfsutils&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And added this line at the end of the file &lt;strong&gt;/etc/sysfs.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;module/hid_apple/parameters/fnmode = 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I then restarted the computer, and while in cable and Windows mode, I pressed the
key combination:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Fn + x + l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After doing this, the primary option for the F1 to F12 keys will be the function
keys instead of the multimedia keys.&lt;/p&gt;
&lt;p&gt;To modify the screen brightness, turn the keyboard backlight on and off, or mute
and unmute the audio, you must press the Fn key plus the function key (Fn +
F1 or Fn + F2). This will allow you to continue using your K8 on Linux
with the switches in Windows/Android mode, in wired or Bluetooth mode, with the
function keys as the primary option instead of the multimedia keys.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Wed, 14 Jul 2021 17:37:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2021-07-14:/site/posts/2021/07/14/k8.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>keychron</category><category>k8</category></item><item><title>Setup Debian Keyboard Layout and Distribution</title><link>https://porfiriopaiz.github.io/site/posts/2021/07/14/kb-layout-and-distribution.html</link><description>&lt;p&gt;During the Debian installation process, we are prompted to set up our keyboard
layout and distribution. Unfortunately, my preferred layout is not listed as
one of the available options.&lt;/p&gt;
&lt;p&gt;I would like to set it up as English International with AltGr dead keys.&lt;/p&gt;
&lt;p&gt;This is something I need to configure as a post-installation setting by running
the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;su -c &amp;#39;localectl set-x11-keymap us thinkpad altgr-intl&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets the layout to English (US), the model to one compatible with my
Lenovo ThinkPad T440p, and the variant to Dead keys via AltGr. This allows me
to input characters such as á or ñ by simply pressing: AltGr + a or AltGr + n,
respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;pionen@lilit:~$ &lt;/span&gt;localectl
&lt;span class="go"&gt;System Locale: LANG=en_US.UTF-8&lt;/span&gt;
&lt;span class="go"&gt;               LANGUAGE=en_US:en&lt;/span&gt;
&lt;span class="go"&gt;    VC Keymap: n/a&lt;/span&gt;
&lt;span class="go"&gt;   X11 Layout: us&lt;/span&gt;
&lt;span class="go"&gt;    X11 Model: thinkpad&lt;/span&gt;
&lt;span class="go"&gt;  X11 Variant: altgr-intl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, I can continue using the English (US) keyboard layout when typing in
either English or Spanish without needing to change the variant or physical
layout.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Porfirio Páiz</dc:creator><pubDate>Wed, 14 Jul 2021 16:38:00 -0600</pubDate><guid>tag:porfiriopaiz.github.io,2021-07-14:/site/posts/2021/07/14/kb-layout-and-distribution.html</guid><category>floss</category><category>deb11</category><category>debian</category><category>distribution</category><category>keyboard</category><category>layout</category></item></channel></rss>